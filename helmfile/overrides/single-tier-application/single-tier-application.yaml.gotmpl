{{/* nginxdemos/hello is a placeholder and should eb replaced with where the application docker image is stored. (In a docker registry)*/}}}
image:
  repository: nginxdemos/hello
  tag: "{{ env "DOCKER_TAG" | default "latest" }}" 
  pullPolicy: Always

initContainers:
    - name: init-secrets
      image: mtscontainers.azurecr.io/azurekvsidecar:latest
      imagePullPolicy: Always
      env:
        - name: KEYVAULT_READ_USER
          value: {{ requiredEnv "KEYVAULT_READ_USER" }}
        - name: KEYVAULT_READ_PASSWORD
          value: {{ requiredEnv "KEYVAULT_READ_PASSWORD" }}  
        - name: SUBSCRIPTION_ID
          value: {{ requiredEnv "SUBSCRIPTION_ID" }}  
        - name: TENANT_ID
          value: {{ requiredEnv "TENANT_ID" }}  
        - name: KEYVAULT_NAME
          value: {{ requiredEnv "KEYVAULT_NAME" }}  
        - name: K8S_CLUSTER_NAME
          value: {{ requiredEnv "K8S_CLUSTER_NAME" }}             
        - name: K8S_RG_NAME
          value: {{ requiredEnv "K8S_RG_NAME" }}   
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: SINGLE_SECRET
          value: "true"        
        - name: SINGLE_SECRET_NAME
          value: web-example-secret    
        - name: SECRET_LIST
          value: "example-secret-username,example-secret-password"    
        - name: KEY_NAME_OVERRIDES
          value: example-secret-username=renamed-example-username


extraEnv:
    - name: EXAMPLE_STATIC_ENVIRONMENT_VARIABLE
      value: "hardcodedvalue"
    - name: EXAMPLE_DYNAMIC_ENVIRONMENT_VARIABLE
      value: dynamicvalue-{{ .Environment.Name }}
    - name: EXAMPLE_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: web-example-secret
          key: renamed-example-username
    - name: EXAMPLE_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: web-example-secret
          key: example-secret-password         

ingress:

    enabled: true
    {{/* Use this configuration for URL Based routing (e.x. service.canada.ca/application) */}}    
    path: /
    annotations: {}
    hosts:
    {{- if or (eq .Environment.Name "prod-blue") (eq .Environment.Name "prod-green") }}
          - {{ requiredEnv "PROJECT" }}.{{ requiredEnv "BASE_DOMAIN" }}
    {{ else }}
          - {{ requiredEnv "PROJECT" }}-{{ .Environment.Name }}.{{ requiredEnv "BASE_DOMAIN" }}
          - {{ requiredEnv "PROJECT" }}.{{ requiredEnv "BASE_DOMAIN" }}
    {{ end }} 
    {{/* Use this configuration for Domain Based routing (e.x. application.service.canada.ca)
    hosts:
    {{- if or (eq .Environment.Name "prod-blue") (eq .Environment.Name "prod-green") }}
        - web-example.{{ .Environment.Name }}.{{ requiredEnv "BASE_DOMAIN" }}
        - web-example.{{ requiredEnv "BASE_DOMAIN" }}
    {{ else }}
        - web-example-{{ .Environment.Name }}.{{ requiredEnv "BASE_DOMAIN" }}
    {{ end }}     
    */}}    
resources:
  requests:
    cpu: 200m
    memory: 512Mi
healthChecks:
    livenessDelay: 15
    readinessDelay: 15
    livenessPath: /
    readinessPath: /
port: 80
persistence:
    enabled: true
    accessMode: ReadWriteOnce
    volumeMount:
        path: /mnt/example
    storageClass: dtsstorageclass
    size: 2Gi