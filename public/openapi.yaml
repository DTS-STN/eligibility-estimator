openapi: 3.0.3
info:
  title: Benefits Eligibility Estimator API
  version: '1.0'
  description: >
    Calculates eligibility for OAS, GIS, and more. Support for entitlement value is coming soon.


    Please note that this is simply a testing interface for the backend API, and is not meant to serve as a user-facing frontend interface.


    The code for this project is available [here](https://github.com/DTS-STN/eligibility-estimator).


    **To interact with the API, click the "Try it out" button below on the right.**

servers:
  - url: /api
    description: Current domain (default)
  - url: https://eligibility-estimator.vercel.app/api
    description: 'Main production site'
  - url: https://eligibility-estimator-dev.vercel.app/api
    description: 'Main development site'
  - url: http://localhost:3000/api
    description: 'Local developer environment'

paths:
  /calculateEligibility:
    get:
      summary: Calculate eligibility
      description: Calculates eligibility for all benefits given a certain set of parameters.
      tags:
        - Endpoints
      parameters:
        - $ref: '#/components/parameters/income'
        - $ref: '#/components/parameters/age'
        - $ref: '#/components/parameters/livingCountry'
        - $ref: '#/components/parameters/legalStatus'
        - $ref: '#/components/parameters/legalStatusOther'
        - $ref: '#/components/parameters/yearsInCanadaSince18'
        - $ref: '#/components/parameters/maritalStatus'
        - $ref: '#/components/parameters/partnerIncome'
        - $ref: '#/components/parameters/partnerReceivingOas'
        - $ref: '#/components/parameters/everLivedSocialCountry'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

components:
  schemas:
    FieldKey:
      type: array
      description: A list of fields that the frontend should display.
      items:
        type: string
        enum:
          - income
          - age
          - livingCountry
          - legalStatus
          - legalStatusOther
          - yearsInCanadaSince18
          - maritalStatus
          - partnerIncome
          - partnerReceivingOas
          - everLivedSocialCountry

    ResultKey:
      type: string
      description: A summary of the resulting eligibility calculation
      format: string
      enum:
        - Eligible!
        - Not eligible!
        - Conditionally eligible...
        - Need more information...
        - Request is invalid!

    ResultReason:
      type: string
      description: The reason for the provided outcome
      format: string
      enum:
        - You meet the criteria
        - Age does not meet requirement for this benefit
        - Not enough years in Canada
        - Not living in Canada
        - Legal status does not meet requirement for this benefit
        - Not in a country with a social agreement
        - Need more information...
        - Not eligible for OAS
        - Income too high
        - Your marital status does not meet the requirement for this benefit

    ResultObject:
      type: object
      description: The calculated results for a given benefit
      required:
        - eligibilityResult
        - entitlementResult
        - reason
        - detail
      properties:
        eligibilityResult:
          $ref: '#/components/schemas/ResultKey'
        entitlementResult:
          type: number
          example: 500
        reason:
          $ref: '#/components/schemas/ResultReason'
        detail:
          type: string
          example: Based on the information provided, you are eligible!
        missingFields:
          $ref: '#/components/schemas/FieldKey'

    ResponseObject:
      type: object
      description: The overall eligibility results, plus a list of fields that the frontend should display
      required:
        - oas
        - gis
        - allowance
        - afs
        - visibleFields
      properties:
        oas:
          $ref: '#/components/schemas/ResultObject'
        gis:
          $ref: '#/components/schemas/ResultObject'
        allowance:
          $ref: '#/components/schemas/ResultObject'
        afs:
          $ref: '#/components/schemas/ResultObject'
        visibleFields:
          $ref: '#/components/schemas/FieldKey'

    ErrorResponseObject:
      type: object
      description: Error details for the failed request
      required:
        - error
        - detail
      properties:
        error:
          type: string
          example: Request is invalid!
        detail:
          type: object

  responses:
    '200':
      description: >
        Successful request and response. Returns the overall eligibility results, plus a list of fields that the frontend should display.


        _Note that "afs" means "Allowance for Survivor"._
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseObject'
          examples:
            'Standard case':
              value:
                oas:
                  eligibilityResult: Eligible!
                  entitlementResult: 0
                  reason: You meet the criteria
                  detail: Based on the information provided, you are eligible for OAS!
                gis:
                  eligibilityResult: Eligible!
                  entitlementResult: 0
                  reason: You meet the criteria
                  detail: Based on the information provided, you are eligible for GIS!
                allowance:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Age does not meet requirement for this benefit
                  detail: You must be between 60 and 64 to be eligible for Allowance.
                afs:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Age does not meet requirement for this benefit
                  detail: You must be between 60 and 64 to be eligible for Allowance for Survivor.
                visibleFields:
                  - income
                  - age
                  - livingCountry
                  - legalStatus
                  - yearsInCanadaSince18
                  - maritalStatus
                  - partnerReceivingOas

            'Blank request':
              value:
                oas:
                  eligibilityResult: Need more information...
                  entitlementResult: 0
                  reason: Need more information...
                  detail: Missing 1 required field.
                  missingFields:
                    - income
                gis:
                  eligibilityResult: Need more information...
                  entitlementResult: 0
                  reason: Need more information...
                  detail: Missing 1 required field.
                  missingFields:
                    - income
                allowance:
                  eligibilityResult: Need more information...
                  entitlementResult: 0
                  reason: Need more information...
                  detail: Missing 1 required field.
                  missingFields:
                    - income
                afs:
                  eligibilityResult: Need more information...
                  entitlementResult: 0
                  reason: Need more information...
                  detail: Missing 1 required field.
                  missingFields:
                    - income
                visibleFields:
                  - income

            'Ineligible case':
              value:
                oas:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Income too high
                  detail: Your income is too high to be eligible for OAS.
                gis:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Not eligible for OAS
                  detail: You need to be eligible for OAS to be eligible for GIS.
                allowance:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Age does not meet requirement for this benefit
                  detail: You must be between 60 and 64 to be eligible for Allowance.
                afs:
                  eligibilityResult: Not eligible!
                  entitlementResult: 0
                  reason: Age does not meet requirement for this benefit
                  detail: You must be between 60 and 64 to be eligible for Allowance for Survivor.
                visibleFields:
                  - income
                  - age
                  - livingCountry
                  - legalStatus
                  - yearsInCanadaSince18
                  - maritalStatus
                  - partnerReceivingOas

    '400':
      description: Invalid request, typically because the input did not pass the validation rules.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseObject'
          examples:
            'Years in Canada validation':
              value:
                error: Request is invalid!
                detail:
                  message: Years in Canada should be no more than age minus 18
                  path:
                    - yearsInCanadaSince18
                  type: number.max
            'Maximum age validation':
              value:
                error: Request is invalid!
                detail:
                  message: '"age" must be less than or equal to 150'
                  path:
                    - age
                  type: number.max

  parameters:
    income:
      name: income
      in: query
      description: >
        The client's current net income.


        _Note: This should include the client's combined income, and/or partner's income, if applicable._
      required: true
      example: 10000
      schema:
        type: integer
        description: Income in Canadian dollars.
      allowEmptyValue: false

    age:
      name: age
      in: query
      description: The current age of the client, up to a max of 150.
      required: false
      schema:
        type: integer
        description: Age, up to a max of 150.
        example: 65
        maximum: 150
      allowEmptyValue: false

    livingCountry:
      name: livingCountry
      in: query
      description: >
        The country that the client is currently living in.


        _For testing purposes, "Agreement" and "No agreement" are options._
      required: false
      allowEmptyValue: false
      schema:
        type: string
        description: Any country
        example: Canada
        enum:
          - Canada
          - Agreement
          - No Agreement

    legalStatus:
      name: legalStatus
      in: query
      description: The current legal status of the client.
      required: false
      example: canadianCitizen
      schema:
        type: string
        enum:
          - canadianCitizen
          - permanentResident
          - sponsored
          - indianStatus
          - other
        description: The current legal status of the client.
      allowEmptyValue: false

    legalStatusOther:
      name: legalStatusOther
      in: query
      description: >
        The current legal status of the client.


        _Note that this is only required when legalStatus is "Other"._
      required: false
      example: Some legal status
      schema:
        type: string
      allowEmptyValue: false

    yearsInCanadaSince18:
      name: yearsInCanadaSince18
      in: query
      description: >
        How many years the client has lived in Canada since the age of 18.


        _Note that this can not be greater than `age - 18`._
      required: false
      example: 40
      schema:
        type: integer
        description: Years, up to a max of 100.
        maximum: 100
      allowEmptyValue: false

    maritalStatus:
      name: maritalStatus
      in: query
      description: The current marital status of the client.
      required: false
      example: married
      schema:
        type: string
        enum:
          - single
          - married
          - commonLaw
          - widowed
          - divorced
          - separated
        description: The current marital status of the client.
      allowEmptyValue: false

    partnerIncome:
      name: partnerIncome
      in: query
      description: >
        What is your partner's annual net income in Canadian dollars?


        _Note: This can be provided only when marital status is Married or Common-Law._
      required: false
      example: 10000
      schema:
        type: integer
        description: Income in Canadian dollars.
      allowEmptyValue: false

    partnerReceivingOas:
      name: partnerReceivingOas
      in: query
      description: >
        Is the client's partner receiving OAS?


        _Note: This can be "true" only when marital status is Married or Common-Law._
      required: false
      example: false
      schema:
        type: boolean
      allowEmptyValue: false

    everLivedSocialCountry:
      name: everLivedSocialCountry
      in: query
      description: Has the client ever lived in a country with a social agreement? [link of countries to be included]
      required: false
      example: true
      schema:
        type: boolean
      allowEmptyValue: false
